* Emacs Lisp Literate Programming Example

Idén med projektet är två: 

- Dels bygga upp en ordentlig fras/ordlista för svenska till tyska
- Dels att lära mig elisp och org-mode bättre
  
- Länkar att låna från, i ordning av troligtvis mest nytta:

  - https://sv.speaklanguages.com/tyska/fraser/
  - https://sv.speaklanguages.com/tyska/ordlista/
  - http://www.engoi.com/sv/de/index.html
  - http://www.ord.se/reseparlorer/tysk-parlor/ (JS, men innehållet ligger i DOMen)
  - https://www.swedishnomad.com/sv/tyska-fraser-och-uttryck/
  - https://sv.wiktionary.org/wiki/Kategori:Tyska/Fraser (mer fraser som i ordspråk)
  
    
Tanken är att få ut en CSV lista som ser ut ungefär såhär:
#+BEGIN_SRC csv
back,front,tags(comma separated list of tags for each card)
från,von,word
har,habe,word
#+END_SRC
Ordlistan laddas in ett ett verktyg som heter "Ankiapp", vilket är ett verktyg för att lära sig nya saker med hjälp av deras lösning för att koncentrera på det som är viktigast att repetera. 

Vi börjar experimentet med att definera ett "source block", som kan avändas av andra "source blocks" för att göra requests. 
#+NAME: fetch
#+BEGIN_SRC restclient :var path="" :exports none
GET http://sv.bab.la/:path
#+END_SRC

Börjar med att ladda in dom bibliotek som behövs. 
#+BEGIN_SRC emacs-lisp :session=links
(require 'cl)
(require 'xml)
(require 'dom)
#+END_SRC

#+RESULTS:
: dom

#+BEGIN_SRC emacs-lisp :session=links
(defun make-url (path) 
  (concat "http://sv.bab.la/" path))
#+END_SRC

#+RESULTS:
: make-url

get-url hämtar innehållet från en url, och ser till att innehåll decodas i utf-8. Denna funktion behövs senare för att den ovanstående lösningen med source-block fungerar inte.
#+BEGIN_SRC emacs-lisp :session=links
(defun get-url (url)
  (with-current-buffer 
      (url-retrieve-synchronously url) 
    (decode-coding-string (buffer-string) 'utf-8)))
#+END_SRC

#+RESULTS:
: get-url

parse tar en sträng med html och parse domen till en associationslista
#+BEGIN_SRC emacs-lisp :session=links
(defun parse (src)
  (with-temp-buffer
    (insert src)
    (libxml-parse-html-region (point-min) (point-max))))
#+END_SRC

#+RESULTS:
: parse

clean-link tar en sträng och tar bort allting i en sträng från '#' och framåt
#+BEGIN_SRC emacs-lisp :session=links
(defun clean-link (link)
  "Removes # and everything after it in strings. twitter.com#lol -> twitter.com"
  (substring link 0 (string-match "#" link)))
#+END_SRC

#+RESULTS:
: clean-link

rm-dups är en liten wrapper kring cl-remove-duplicates. cl biblioteket, som står för "common lisp", ger oss massa fler funktioner. Men ofta är dom generella och det finns olika typer av sätt att jämföra om två 'saker' är lika. Så istället för att skriva ut det hela tiden äre smidigt med en wrapper.
#+BEGIN_SRC emacs-lisp :session=links
(defun rm-dups (links)
  (cl-remove-duplicates links :test #'string-equal))
#+END_SRC

#+RESULTS:
: rm-dups

parse-links tar den parsade domen, alltså en associationslista och hittar alla länkar, tar deras href-attribut och städar lite
#+BEGIN_SRC emacs-lisp :session=links
(defun parse-links (dom) 
  (rm-dups (mapcar #'clean-link (remove-if-not #'stringp 
                                               (mapcar 
                                                (lambda (tag) 
                                                  (dom-attr tag 'href)) 
                                                (dom-by-tag dom 'a))))))
#+END_SRC

#+RESULTS:
: parse-links

#+BEGIN_SRC emacs-lisp :session=links
(defun add-correct-lang-per-link (link)
  (concat link "svensk-tysk"))
#+END_SRC

#+RESULTS:
: add-correct-lang-per-link

Här börjar den mer specifika delen för just fraser från http://sv.bab.la/. 

fraser-p är en enkelt predicate function, som kollar om ordet "fraser" finns i den specifierade strängen
#+BEGIN_SRC emacs-lisp :session=links
(defun fraser-p (l) 
  (string-match "fraser" l))
#+END_SRC

#+RESULTS:
: fraser-p

direct-link-p är specifik till dessa typer av länkar, det antas att dom ser ut på ett visst sätt.
#+BEGIN_SRC emacs-lisp :session=links
(defun direct-link-p (l)
  (= 5 (length (split-string l "/"))))
#+END_SRC

#+RESULTS:
: direct-link-p

Parsa alla länkar som går direkt till en sida med fraser. Dessa har då 4st "/" i namnet. Mitten-delen av pathen är namnet på sektionen.
#+BEGIN_SRC emacs-lisp :session=links
(defun direct-links (src)
  (mapcar #'add-correct-lang-per-link 
          (rm-dups (remove-if-not #'direct-link-p 
                                  (remove-if-not #'fraser-p 
                                                 (parse-links (parse src)))))))
#+END_SRC

#+RESULTS:
: direct-links

#+BEGIN_SRC emacs-lisp :session=links :cache yes
(defvar links-to-phrases '())
(setq links-to-phrases (direct-links (get-url (make-url "fraser"))))
#+END_SRC

#+RESULTS[edd2a9064192eb2b05d91841ee73bd6227aff5dd]:
| /fraser/ansokan/personligt-brev/svensk-tysk | /fraser/ansokan/cv/svensk-tysk | /fraser/ansokan/referensbrev/svensk-tysk | /fraser/akademiker/innehallsforteckning/svensk-tysk | /fraser/akademiker/inledning/svensk-tysk | /fraser/akademiker/huvuddel/svensk-tysk | /fraser/akademiker/statistik/svensk-tysk | /fraser/akademiker/grafer-bilder-diagram/svensk-tysk | /fraser/akademiker/avslutning/svensk-tysk | /fraser/akademiker/citation/svensk-tysk | /fraser/akademiker/forkortningar/svensk-tysk | /fraser/affarer/brev/svensk-tysk | /fraser/affarer/e-post/svensk-tysk | /fraser/affarer/faktura/svensk-tysk | /fraser/affarer/bestallning/svensk-tysk | /fraser/affarer/moten/svensk-tysk | /fraser/affarer/reservationer/svensk-tysk | /fraser/affarer/forkortningar/svensk-tysk | /fraser/affarer/yrkesbeteckningar/svensk-tysk | /fraser/personligt/brev/svensk-tysk | /fraser/personligt/e-post/svensk-tysk | /fraser/personligt/meddelanden-inbjudningar/svensk-tysk | /fraser/personligt/lyckonskningar/svensk-tysk | /fraser/personligt/sms-webb/svensk-tysk | /fraser/resa/generellt/svensk-tysk | /fraser/resa/dator/svensk-tysk | /fraser/resa/halsa/svensk-tysk | /fraser/resa/shopping/svensk-tysk | /fraser/resa/ata-ute/svensk-tysk | /fraser/resa/logi/svensk-tysk | /fraser/resa/siffror-pengar/svensk-tysk | /fraser/resa/datum-tid/svensk-tysk | /fraser/resa/ta-sig-runt/svensk-tysk | /fraser/resa/florta/svensk-tysk | /fraser/immigration/dokument/svensk-tysk | /fraser/immigration/bank/svensk-tysk | /fraser/immigration/arbete/svensk-tysk | /fraser/immigration/studera/svensk-tysk | /fraser/immigration/bostad/svensk-tysk | /fraser/immigration/stöd-för-funktionshindrade/svensk-tysk | /fraser/immigration/husdjur/svensk-tysk |



parse-phrases hittar alla fraser i domen.
#+BEGIN_SRC emacs-lisp :session=links
(defun parse-phrases (src)
  (flet ((get-suggestion  (n) (dom-texts (dom-by-class n "dict-suggestion")))
         (get-result      (n) (dom-texts (dom-by-class n "dict-result")))
         (get-explanation (n) (dom-texts (dom-by-class n "dict-explanation"))))
    (mapcar (lambda (entry) 
              (list :suggestion (get-suggestion entry) 
                    :result (get-result entry) 
                    :explanation (get-explanation entry))) 
            (dom-by-class src "dict-entry"))))
#+END_SRC

#+RESULTS:
: parse-phrases

Exempel på hur parse-phrases kan avändas
#+BEGIN_SRC emacs-lisp :session=links :results code
(parse-phrases (parse (get-url (make-url (nth 1 links-to-phrases)))))
#+END_SRC

#+RESULTS:
#+BEGIN_SRC emacs-lisp
((:suggestion "Förnamn" :result "Vorname" :explanation "Den sökandes tilltalsnamn")
 (:suggestion "Efternamn" :result "Nachname" :explanation "Den sökandes familje- eller släktnamn")
 (:suggestion "Födelsetid" :result "Geburtsdatum" :explanation "Den sökandes födelsedatum och -år")
 (:suggestion "Födelseort" :result "Geburtsort" :explanation "Namnet på stället där den sökande föddes")
 (:suggestion "Nationalitet" :result "Staatsangehörigkeit" :explanation "Land där den sökande är medborgare i")
 (:suggestion "Civilstånd" :result "Familienstand" :explanation "Den sökandes nuvarande relationsstatus")
 (:suggestion "Ogift" :result "ledig" :explanation "Inte gift (men kan ha ett förhållande)")
 (:suggestion "Gift" :result "verheiratet" :explanation "Har en man eller en hustru")
 (:suggestion "Änkling/Änka" :result "verwitwet" :explanation "Ensamstående på grund av makens/makans död")
 (:suggestion "adressen" :result "Adresse" :explanation "Uppgifter om var den sökande för tillfället bor")
 (:suggestion "Telefon" :result "Telefon" :explanation "Telefonnumret på vilket den sökande nås")
 (:suggestion "E-post" :result "Email" :explanation "Den sökandes aktuella e-postadress")
 (:suggestion "Hemsida" :result "Website" :explanation "Adressen till den sökandens personliga hemsida eller företagswebbplats")
 (:suggestion "1991 - 1995 / Seattle University / Seattle, WA    Tradenom" :result "1991 - 1995 / Universität Seattle / Seattle, WA  Bachelorstudiengang Betriebswirtschaftslehre" :explanation "Standard format för att lista din utbildning (USA)")
 (:suggestion "Grundskola" :result "Grundschule" :explanation "Den lägsta nivån av skola som ger formell undervisning för barn mellan sex och elva år (USA )")
 (:suggestion "Grundskola (mellanstadiet)" :result "Mittelstufenschule" :explanation "Skola mellan grundskolan och gymnasiet för barn mellan elva och fjorton år (USA )")
 (:suggestion "Gymnasiet" :result "Oberstufenschule" :explanation "Skola efter mellanstadiet för barn i åldrarna fjorton till arton år (USA)")
 (:suggestion "Högskola/Universitet" :result "Hochschule" :explanation "Namn för examen på högskolenivå (USA)")
 (:suggestion "Dagis" :result "Vorschule" :explanation "Svenska barnomsorgen innan skolgång")
 (:suggestion "Förskola" :result "Grundschule" :explanation "Svensk skolning för barn i åldrarna fyra till sex år")
 (:suggestion "Grundskola" :result "weiterführende Schule" :explanation "Svensk utbildning för ungdomar i åldrarna sex till femton år")
 (:suggestion "Gymnasiet" :result "Oberstufenkolleg" :explanation "Svensk utbildning för ungdomar i åldrarna sexton till nitton år")
 (:suggestion "Skola för elever i sixth form" :result "Universität" :explanation "Brittisk utbildning för ungdomar i åldrarna sexton till arton år. Har som syfte att förbättra betyg för att söka vidare.")
 (:suggestion "Universitet" :result "" :explanation "Brittisk motsvarighet till svenskt universitet/högskola")
 (:suggestion "1998- / Jackson Skor AB / Spokane, WA    Chef    Ansvarsområde:" :result "1998 - heute / Jackson Shoes Inc. / Spokane, WA  Manager  Verantwortlichkeiten:" :explanation "Ett exempel på det vanligaste sättet att lista sin yrkesbakgrund")
 (:suggestion "Arbetslivserfarenhet inom/från ..." :result "Arbeitserfahrung bei..." :explanation "Används för att ange ett jobb som du haft för att få insikt eller kunskap inom ett visst arbetsområde")
 (:suggestion "Praktikplats hos ..." :result "Praktikum bei..." :explanation "Används för att ange tillfälligt arbete som du haft för att få insikt eller kunskap inom ett visst arbetsområde. Termen används ofta för arbete som utförts utomlands under en viss period")
 (:suggestion "Volontärarbete i ..." :result "Ehrenamtliche Tätigkeit bei..." :explanation "Används för att ange oavlönat arbete, vanligtvis utfört för att hjälpa utsatta")
 (:suggestion "God förståelse i ...; både skriftligen och muntligen" :result "Gute ...-Kenntnisse in Wort und Schrift" :explanation "Används för att ange att den sökande har en realativt god kompetensnivå i ett språk")
 (:suggestion "Skriver och talar ... flytande" :result "... fließend in Wort und Schrift" :explanation "Används för att ange att den sökande talar ett visst språk flytande")
 (:suggestion "Datakunnig" :result "gute Computer-Kenntnisse" :explanation "Används för att indikera att den sökande kan använda alla grundläggande datafunktioner")
 (:suggestion "Utmärkt kommunikationsförmåga / förhandlingsteknik / presentationsteknik." :result "Hervorragende(s) kommunikative Fähigkeiten / Verhandlungsgeschick / Präsentationsfähigkeiten" :explanation "Används för att ange att den sökande är bra på att kommunicera / förhandla / presentera")
 (:suggestion "Avancerade kunskaper i Microsoft Office Suite / HTML-programmering." :result "Fortgeschrittene Kenntnisse in Microsoft Office / HTML-Programmierung" :explanation "Används för att ange att den sökande har god kunskap i användningen av alla Microsoft Office-program samt av HMTL-kod")
 (:suggestion "Erfarenhet av Microsoft Word / Excel / Access / PowerPoint." :result "Microsoft Word-, Excel-, Access-, Powerpoint-Kenntnisse" :explanation "Används för att ange att den sökande har erfarenhet av ordbehandlings-, kalkyl-, databas- och presentationsprogram")
 (:suggestion "Erfarenhet av CAD / CAM." :result "Kenntnisse in CAD / CAM" :explanation "Används för att ange att den sökande kan använda design programvara")
 (:suggestion "Jag besitter ett ...-körkort." :result "Führerschein Klasse..." :explanation "Används för att ange att den sökande lagligt har lov att köra bil"))
#+END_SRC

ge-tag splitar en URL och antar att den 3:e i listan är det som används som "tag"
#+BEGIN_SRC emacs-lisp :session=links :results list
(defun get-tag (link)
  (nth 2 (split-string link "/")))
#+END_SRC

#+RESULTS:
: - get-tag

get-phrases från en "link", som är en path till en frase-sida
#+BEGIN_SRC emacs-lisp :session=links
(defun get-phrases (link)
  (parse-phrases (parse (get-url (concat "http://sv.bab.la" link)))))
#+END_SRC

#+RESULTS:
: get-phrases

helper funktion för att skriva till cards.csv filen
#+BEGIN_SRC emacs-lisp :session=links
(defun write-to-file (filename str)
  (write-region str nil filename 'append))
#+END_SRC

#+RESULTS:
: write-to-file

Tar en frase och gör till en csv-rad
#+BEGIN_SRC emacs-lisp :session=links
(defun row->csv (tag phrase)
  "Formattet: sugg,result,tag\n"
  (let ((clean-sugg (replace-regexp-in-string "," ";" (plist-get phrase :suggestion)))
        (clean-result (replace-regexp-in-string "," ";" (plist-get phrase :result))))
    (concat clean-sugg
            ","
            clean-result
            ","
            tag)))
#+END_SRC

#+RESULTS:
: row->csv

Gör helt enkelt om hela listan med fraser till en lista klar för csv export
#+BEGIN_SRC emacs-lisp :session=links
(defun make-csv-rows-of-phrases (tag phrases)
  (mapcar (lambda (x) (row->csv tag x)) phrases))
#+END_SRC

#+RESULTS:
: make-csv-rows-of-phrases

Tar en "sektion" av fraser, t.ex. Resa och skriver till filen
#+BEGIN_SRC emacs-lisp :session=links
(defun append-section-to-csv-file (filename section)
  (let* ((tag (plist-get section :tag))
         (phrases (make-csv-rows-of-phrases tag (plist-get section :phrases)))
         (lines (concat (string-join phrases "\n") "\n")))
    (write-to-file filename lines)))
#+END_SRC

#+RESULTS:
: append-section-to-csv-file

Skapar en p-lista för en "sektion".
#+BEGIN_SRC emacs-lisp :session=links
(defun get-section (link)
  (list :tag (get-tag link) :phrases (get-phrases link)))
#+END_SRC

#+RESULTS:
: get-section

En liten helper för att börja csv filen med en header
#+BEGIN_SRC emacs-lisp :session=links
(defun append-header-to-csv-file (filename)
  "The header is: back,front,tags"
  (write-to-file filename "back,front,tags\n"))
#+END_SRC

#+RESULTS:
: append-header-to-csv-file

Som funktionen heter så appendas alla sektioner till csv filen
#+BEGIN_SRC emacs-lisp :session=links
(defun append-all-links-as-sections-to-single-csv-file (links)
  (let ((filename "cards.csv"))
    (progn 
      (if (file-exists-p filename)
          (delete-file filename))
      (append-header-to-csv-file filename)
      (while links
        (progn (message "Add: %s to file" (car links))
               (append-section-to-csv-file filename (get-section (car links)))
               (setq links (cdr links)))))))

#+END_SRC

#+RESULTS:
: append-all-links-as-sections-to-single-csv-file

Gör en kopia, tror jag, av links-to-phrases
#+BEGIN_SRC emacs-lisp :session=links
(defvar all-section-links '())
(setq all-section-links links-to-phrases)
#+END_SRC

#+RESULTS:
| /fraser/ansokan/personligt-brev/svensk-tysk | /fraser/ansokan/cv/svensk-tysk | /fraser/ansokan/referensbrev/svensk-tysk | /fraser/akademiker/innehallsforteckning/svensk-tysk | /fraser/akademiker/inledning/svensk-tysk | /fraser/akademiker/huvuddel/svensk-tysk | /fraser/akademiker/statistik/svensk-tysk | /fraser/akademiker/grafer-bilder-diagram/svensk-tysk | /fraser/akademiker/avslutning/svensk-tysk | /fraser/akademiker/citation/svensk-tysk | /fraser/akademiker/forkortningar/svensk-tysk | /fraser/affarer/brev/svensk-tysk | /fraser/affarer/e-post/svensk-tysk | /fraser/affarer/faktura/svensk-tysk | /fraser/affarer/bestallning/svensk-tysk | /fraser/affarer/moten/svensk-tysk | /fraser/affarer/reservationer/svensk-tysk | /fraser/affarer/forkortningar/svensk-tysk | /fraser/affarer/yrkesbeteckningar/svensk-tysk | /fraser/personligt/brev/svensk-tysk | /fraser/personligt/e-post/svensk-tysk | /fraser/personligt/meddelanden-inbjudningar/svensk-tysk | /fraser/personligt/lyckonskningar/svensk-tysk | /fraser/personligt/sms-webb/svensk-tysk | /fraser/resa/generellt/svensk-tysk | /fraser/resa/dator/svensk-tysk | /fraser/resa/halsa/svensk-tysk | /fraser/resa/shopping/svensk-tysk | /fraser/resa/ata-ute/svensk-tysk | /fraser/resa/logi/svensk-tysk | /fraser/resa/siffror-pengar/svensk-tysk | /fraser/resa/datum-tid/svensk-tysk | /fraser/resa/ta-sig-runt/svensk-tysk | /fraser/resa/florta/svensk-tysk | /fraser/immigration/dokument/svensk-tysk | /fraser/immigration/bank/svensk-tysk | /fraser/immigration/arbete/svensk-tysk | /fraser/immigration/studera/svensk-tysk | /fraser/immigration/bostad/svensk-tysk | /fraser/immigration/stöd-för-funktionshindrade/svensk-tysk | /fraser/immigration/husdjur/svensk-tysk |

#+BEGIN_SRC emacs-lisp :session=links
(append-all-links-as-sections-to-single-csv-file all-section-links)
#+END_SRC

#+RESULTS:

Det funkade lite dåligt att ha alla i samma fil, mest för att många fraser var ointressanta. Kör ny fil för varje istället, så blir det lättare att hålla reda på.
#+BEGIN_SRC emacs-lisp :session=links
(defun append-links-as-sections-to-separate-csv-files (links)
  (let* ((files (rm-dups (mapcar (lambda (l) (plist-get (get-section l) :tag)) links))))
    (progn 
      (mapcar (lambda (f) (append-header-to-csv-file (concat f ".csv"))) files)
      (while links
        (let* ((section (get-section (car links)))
               (filename (concat (plist-get section :tag) ".csv")))
          (progn (message "Add: %s to file" (car links))
                 (append-section-to-csv-file filename section)
                 (setq links (cdr links))))))))
#+END_SRC

#+RESULTS:
: append-links-as-sections-to-separate-csv-files

TOD: ändra tagen till den "tredje" istället. ha en "tag" och ett "filnamn" istället

#+BEGIN_SRC emacs-lisp :session=links
(append-links-as-sections-to-separate-csv-files all-section-links)
#+END_SRC

#+RESULTS:


#+BEGIN_SRC emacs-lisp :session=links :results list :exports both
(mapcar (lambda (x) x) all-section-links)
#+END_SRC

#+RESULTS:
- /fraser/ansokan/personligt-brev/svensk-tysk
- /fraser/ansokan/cv/svensk-tysk
- /fraser/ansokan/referensbrev/svensk-tysk
- /fraser/akademiker/innehallsforteckning/svensk-tysk
- /fraser/akademiker/inledning/svensk-tysk
- /fraser/akademiker/huvuddel/svensk-tysk
- /fraser/akademiker/statistik/svensk-tysk
- /fraser/akademiker/grafer-bilder-diagram/svensk-tysk
- /fraser/akademiker/avslutning/svensk-tysk
- /fraser/akademiker/citation/svensk-tysk
- /fraser/akademiker/forkortningar/svensk-tysk
- /fraser/affarer/brev/svensk-tysk
- /fraser/affarer/e-post/svensk-tysk
- /fraser/affarer/faktura/svensk-tysk
- /fraser/affarer/bestallning/svensk-tysk
- /fraser/affarer/moten/svensk-tysk
- /fraser/affarer/reservationer/svensk-tysk
- /fraser/affarer/forkortningar/svensk-tysk
- /fraser/affarer/yrkesbeteckningar/svensk-tysk
- /fraser/personligt/brev/svensk-tysk
- /fraser/personligt/e-post/svensk-tysk
- /fraser/personligt/meddelanden-inbjudningar/svensk-tysk
- /fraser/personligt/lyckonskningar/svensk-tysk
- /fraser/personligt/sms-webb/svensk-tysk
- /fraser/resa/generellt/svensk-tysk
- /fraser/resa/dator/svensk-tysk
- /fraser/resa/halsa/svensk-tysk
- /fraser/resa/shopping/svensk-tysk
- /fraser/resa/ata-ute/svensk-tysk
- /fraser/resa/logi/svensk-tysk
- /fraser/resa/siffror-pengar/svensk-tysk
- /fraser/resa/datum-tid/svensk-tysk
- /fraser/resa/ta-sig-runt/svensk-tysk
- /fraser/resa/florta/svensk-tysk
- /fraser/immigration/dokument/svensk-tysk
- /fraser/immigration/bank/svensk-tysk
- /fraser/immigration/arbete/svensk-tysk
- /fraser/immigration/studera/svensk-tysk
- /fraser/immigration/bostad/svensk-tysk
- /fraser/immigration/stöd-för-funktionshindrade/svensk-tysk
- /fraser/immigration/husdjur/svensk-tysk



* export
